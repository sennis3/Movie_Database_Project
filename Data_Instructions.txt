Instructions for Installation and Loading the Data


I used MySQL to handle the database for my application. To load the data into MySQL, first open MySQL and create a new, empty schema called “movies”. Then go to the Server tab and choose Data Import. Find the unzipped table files in the project folder and select those for import, select the movies schema to import the data tables into, and then click start import.


All of the following changes have already been made to the data included in the project file, so you don’t need to replicate any of these alterations.


One change I made to the original data in my database is the worldwide gross attribute. When I found the data online, it provided all monetary attributes as strings in order to describe what currency it was, such as $, GBP, FRF, JPY, etc. This prevented me from doing any sort of arithmetic to these values such as finding the min, max, or average. To fix this issue, I added a new attribute to the table called worldwide_gross_dollar. I converted this by first eliminating all data of movies with worldwide grosses recorded in other currencies (there were actually very few of these). I then took a substring to take everything after the dollar sign and casted this to a double.


All of the data initially started off as one single table, but I created additional tables in my database design to better handle the actors, directors, and genres. This was especially important for the genres and actors since they were in the original data table as a list for each movie. I separated them and indexed them in their own table so that I could query more easily for what actors and genres are in specific movies.


There were a ton of movies recorded in the original data, and I figured that a lot of it wasn’t useful and was just slowing down the queries and searches, so I decided to decrease the amount of data. I decided to delete all rows of movies that both didn’t have a recorded worldwide gross and had less than 10 thousand votes on IMDb, as these movies aren’t very relevant and may even skew the data.


I also replaced the original imdb_title_id attribute with a numerical movie_id attribute to simplify the primary key for the main movies table.